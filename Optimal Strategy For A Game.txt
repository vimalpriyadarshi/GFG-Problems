/*
https://practice.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1
*/

//given below is code done by vimal priyadarshi

long long rec(int arr[],int i,int j,bool b,vector<vector<int>> &dp)
    {
        if(i==j) return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        if(b==0)
       {
        int leftsum=arr[i]+rec(arr,i+1,j,!b,dp);
        
        int rightsum=arr[j]+rec(arr,i,j-1,!b,dp);
        
        return dp[i][j]=max(leftsum,rightsum);
       }
       else
       {
           int leftsum=rec(arr,i+1,j,!b,dp);
        
        int rightsum=rec(arr,i,j-1,!b,dp);
        return dp[i][j]=min(leftsum,rightsum);
       }
    }
    long long maximumAmount(int arr[], int n)
    {
      vector<vector<int>> dp(n,vector<int> (n,-1));
       return rec(arr,0,n-1,0,dp);
    }
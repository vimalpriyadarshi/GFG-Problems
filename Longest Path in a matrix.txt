/*
https://practice.geeksforgeeks.org/problems/longest-path-in-a-matrix3019/1
*/

//my own code is below

int maxstep(int i,int j,vector<vector<int>> &mat,
    vector<vector<int>> &dp)
    {
        int n=mat.size(),m=mat[i].size();
        int a=0;int b=0;int c=0;int d =0;  
        if(dp[i][j]!=-1)
        return dp[i][j];
        if(i+1<n&&mat[i][j]<mat[i+1][j])
        a=1+maxstep(i+1,j,mat,dp);
        
         if(i-1>=0&&mat[i][j]<mat[i-1][j])
            b= 1+maxstep(i-1,j,mat,dp);
            
         if(j+1<m&&mat[i][j]<mat[i][j+1])
        c=1+maxstep(i,j+1,mat,dp);
        
         if(j-1>=0&&mat[i][j]<mat[i][j-1])
        d=1+maxstep(i,j-1,mat,dp);
        
        if(a==0&&b==0&&c==0&&d==0)
        return dp[i][j]=1;
        return dp[i][j]=max(max(a,b),max(c,d));
        
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) 
    {
         vector<vector<int>> dp(matrix.size(),
               vector<int>(matrix[0].size(),-1));
              
        int  maxx=0;
        for(int i=0;i<matrix.size();i++)
        {
            for(int  j=0;j<matrix[i].size();j++)
            { 
                 maxx=max(maxx,maxstep(i,j,matrix,dp));
            }
        }
       
        
        
       return  maxx;
    }